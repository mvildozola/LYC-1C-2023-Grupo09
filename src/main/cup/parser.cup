package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal IDENTIFIER;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal READ;
terminal WRITE;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal LESS_THAN;
terminal GREATER_THAN;
terminal AND;
terminal OR;

// Non Terminals
non terminal sentence;
non terminal block;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal iteration;
non terminal selection;
non terminal condition;
non terminal comparation;
non terminal comparator;

// Start Symbol Definition
start with block;

block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};

sentence ::= assignment {: System.out.println("End Sentence"); :};

sentence ::= iteration {: System.out.println("Sentence interation"); :};

sentence ::= selection {: System.out.println("Sentence selecction"); :};

sentence ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("Read"); :};

sentence ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET {: System.out.println("Write string constant"); :};
sentence ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET {: System.out.println("Write"); :};

iteration ::= WHILE OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:System.out.println("While"); :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:System.out.println("If"); :};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET ELSE OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET {:System.out.println("If with Else"); :};

condition ::= comparation {: System.out.println("Condition"); :};

condition ::= comparation AND comparation {: System.out.println("And"); :};

condition ::= comparation OR comparation {: System.out.println("And"); :};

comparation ::= expression comparator expression {: System.out.println("Comparation"); :};

comparator ::= LESS_THAN {: System.out.println("<"); :};
comparator ::= GREATER_THAN {: System.out.println(">"); :};

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};