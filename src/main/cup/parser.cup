package lyc.compiler;

import java_cup.runtime.*;
import java.util.*;
import lyc.compiler.simbolsTable.SimbolTable;
import lyc.compiler.simbolsTable.SimbolRow;
import lyc.compiler.simbolsTable.DataType;
import lyc.compiler.tercetos.Tercetos;
import lyc.compiler.tercetos.Terceto;
import java.util.Stack;

class Parser;
action code{:
    Stack<Integer> stack = new Stack<Integer>();
    DataType tipo;
    Stack<Object> elementMiddle = new Stack<Object>();
    public SimbolTable simbolTable = SimbolTable.getSingletonInstance();
    public ArrayList<String> identifiersList = new ArrayList();
    ArrayList<Object> element = new ArrayList<Object>();
    int medio;

    public Tercetos tercetos = Tercetos.getSingletonInstance();

    public void agregar_a_lista(Object elem)  {
            element.add(elem);
        }

    public int ElementInTheMiddle()  {
                int posicion_medio;
                Object valor_medio;
    
    if(element.size() % 2 == 0)
        throw new Error("ElementInTheMiddle: La cantidad de elementos debe ser impar\n");
    element.clear();
    return 0;
    }

Integer indexFactor = -1;
Integer indexExpression = -1;
Integer indexTerm = -1;
Integer indexAssignment = -1;
Integer indexComparator = -1;
Integer indexRead = -1;
Integer indexWrite = -1;
Integer indexExpressionLeft = -1;
Integer indexExpressionRight = -1;
Integer indexComparation = -1;
Integer indexIdentifier = -1;


:}

parser code{:
    public List<SimbolRow> getListaSimbolos() {
        return action_obj.simbolTable.getListaSimbolos();
    }
:}

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;
terminal IDENTIFIER;
terminal WHILE;
terminal IF;
terminal ELSE;
terminal READ;
terminal WRITE;
terminal OPEN_CURLY_BRACKET;
terminal CLOSE_CURLY_BRACKET;
terminal LESS_THAN;
terminal LESS_EQUAL_THAN;
terminal GREATER_THAN;
terminal GREATER_EQUAL_THAN;
terminal AND;
terminal OR;
terminal NOT;
terminal INIT;
terminal DOUBLE_POINTS;
terminal FLOAT;
terminal STRING;
terminal INT;
terminal COMMA;
terminal ELEMENT_IN_THE_MIDDLE;

// Non Terminals
non terminal sentence;
non terminal block;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal iteration;
non terminal selection;
non terminal condition;
non terminal comparation;
non terminal comparator;
non terminal initiation;
non terminal declare;
non terminal variable;
non terminal program;
non terminal params;
non terminal element;

// Start Symbol Definition
start with program;

program ::= initiation block
{: 
    System.out.println("Program");
    tercetos.print(); 
:};

block ::= sentence {: System.out.println("Block"); :};
block ::= block sentence {: System.out.println("Blocks"); :};

sentence ::= IDENTIFIER:id 
{: 
    System.out.println("Identifier"); 
    indexIdentifier = tercetos.create(id.toString(), "", "");
:} assignment {: System.out.println("End Sentence"); :};

params ::= element 
{: 
    System.out.println("Param");
:};
params ::= params COMMA element 
{: 
    System.out.println("Params"); 
:};

element ::= IDENTIFIER:id  
{: 
    agregar_a_lista(id);System.out.println(id); 
    elementMiddle.push(id);
:};
element ::= INTEGER_CONSTANT:constant 
{: 
    agregar_a_lista(constant);System.out.println("Param");
    elementMiddle.push(constant);
:};
element ::= STRING_CONSTANT:constant 
{: 
    agregar_a_lista(constant);System.out.println("Param"); 
    elementMiddle.push(constant);
:};
element ::= FLOAT_CONSTANT:constant 
{: 
    agregar_a_lista(constant);System.out.println("Param"); 
    elementMiddle.push(constant);
:};

sentence ::= iteration {: System.out.println("Sentence interation"); :};

sentence ::= selection {: System.out.println("Sentence selecction"); :};

sentence ::= READ OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
{: 
    System.out.println("Read"); 
    indexRead = tercetos.create("Read", indexExpression, "");
:};

sentence ::= WRITE OPEN_BRACKET STRING_CONSTANT CLOSE_BRACKET 
{: 
    System.out.println("Write string constant"); 
    indexWrite = tercetos.create("Write", indexExpression, "");
:};

sentence ::= WRITE OPEN_BRACKET IDENTIFIER CLOSE_BRACKET 
{: 
    System.out.println("Write"); 
    indexWrite = tercetos.create("Write", indexExpression, "");
:};

iteration ::= WHILE OPEN_BRACKET condition 
CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET 
{: 
    System.out.println("While"); 
    Integer indexToUpdate = stack.pop();
    Integer value = tercetos.size() + 1;
    tercetos.update(indexToUpdate, value);
:};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET 
{:
    System.out.println("If"); 
    Integer indexToUpdate = stack.pop();
    Integer value = tercetos.size() + 1;
    tercetos.update(indexToUpdate, value);
:};

selection ::= IF OPEN_BRACKET condition CLOSE_BRACKET OPEN_CURLY_BRACKET block CLOSE_CURLY_BRACKET 
{:
    System.out.println("If 1"); 
    Integer indexToUpdate = stack.pop();
    Integer value = tercetos.size() + 2;
    tercetos.update(indexToUpdate, value);
    stack.push(value);
:}
ELSE OPEN_CURLY_BRACKET
{: 
    System.out.println("Else"); 
    Integer indexToUpdate = stack.pop();
    Integer value = tercetos.size() + 2;
    Integer indexBi = tercetos.create("BI", "", "");
    stack.push(indexBi);
:} 
block CLOSE_CURLY_BRACKET 
{:
    System.out.println("If with Else"); 
    Integer indexToUpdate = stack.pop();
    Integer value = tercetos.size() + 1;
    tercetos.update(indexToUpdate, value);
:};

condition ::= comparation {: System.out.println("Condition"); :};

condition ::= NOT comparation {: System.out.println("Condition with not"); :};

condition ::= comparation AND comparation {: System.out.println("And"); :};

condition ::= comparation OR comparation {: System.out.println("And"); :};

comparation ::= expression 
{: 
    System.out.println("Comparation");
    indexExpressionLeft = indexExpression;
:}
comparator expression 
{: 
    System.out.println("Comparation");
    indexExpressionRight = indexExpression;
    indexComparation = tercetos.create("CMP", indexExpressionLeft, indexExpressionRight);
    
    String cpm = tercetos.ConvertToAssembler(tercetos.getValue(indexComparator));
    Integer indexToUpdate = tercetos.create(cpm, "", "");
    System.out.println("indexToUpdate: " + indexToUpdate);
    stack.push(indexToUpdate);
:};

comparator ::= LESS_THAN {: System.out.println("<"); indexComparator = tercetos.create("<", "", ""); :};
comparator ::= GREATER_THAN {: System.out.println(">"); indexComparator = tercetos.create(">", "", ""); :};
comparator ::= LESS_EQUAL_THAN {: System.out.println("<="); indexComparator = tercetos.create("<=", "", ""); :};
comparator ::= GREATER_EQUAL_THAN {: System.out.println(">="); indexComparator = tercetos.create(">=", "", ""); :};

assignment ::= ASSIG ELEMENT_IN_THE_MIDDLE OPEN_BRACKET params CLOSE_BRACKET 
{: 
    System.out.println("ElementInTheMiddle"); 
    ElementInTheMiddle();
    Object element = elementMiddle.pop();
    Integer index = tercetos.create(element.toString(), "", "");
    indexAssignment = tercetos.create("=", indexIdentifier, index);
:};

assignment ::= ASSIG expression 
{: 
    System.out.println("Assignment"); 
    indexAssignment = tercetos.create("=", indexIdentifier, indexExpression);
:};

expression ::= expression PLUS term 
{: 
    System.out.println("+");
    indexExpression = tercetos.create("+", indexFactor, indexExpression);
:};
expression ::= expression SUB term 
{: 
    System.out.println("-"); 
    indexExpression = tercetos.create("-", indexFactor, indexExpression);
:};
expression ::= term 
{: 
    System.out.println("Expression = Term"); 
    indexExpression = indexTerm;
:};
term ::= term MULT factor 
{: 
    System.out.println("*"); 
    indexTerm = tercetos.create("*", indexTerm, indexFactor);
:};
term ::= term DIV factor 
{: 
    System.out.println("/"); 
    indexTerm = tercetos.create("/", indexTerm, indexFactor);
:};
term ::= factor 
{: 
    System.out.println("Term = factor"); 
    indexTerm = indexFactor;
:};
factor ::= IDENTIFIER:id  
{: 
    System.out.println("Id: " + id);
    indexFactor = tercetos.create(id.toString(), "", "");
:};
factor ::= INTEGER_CONSTANT:constant 
{: 
    System.out.println("Constant integer: " + constant );
    simbolTable.add("_"+constant, DataType.INT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
:};
factor ::= STRING_CONSTANT:constant  
{: 
    System.out.println("Constant string: " + constant );
    simbolTable.add("_"+constant, DataType.STRING, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
:};
factor ::= FLOAT_CONSTANT:constant   
{: 
    System.out.println("Constant float: " + constant ); 
    simbolTable.add("_"+constant, DataType.FLOAT, constant.toString(), null);
    indexFactor = tercetos.create(constant.toString(), "", "");
:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

initiation ::= INIT OPEN_CURLY_BRACKET declare CLOSE_CURLY_BRACKET;

declare ::= variable;
declare ::= declare variable;

variable ::= IDENTIFIER:id DOUBLE_POINTS INT 
{: 
    simbolTable.add(""+id, DataType.INT, null, null); 
    tipo = DataType.INT;
:};
variable ::= IDENTIFIER:id DOUBLE_POINTS STRING 
{: 
    simbolTable.add(""+id, DataType.STRING, null, null); 
    tipo = DataType.STRING;
:};
variable ::= IDENTIFIER:id DOUBLE_POINTS FLOAT 
{: 
    simbolTable.add(""+id, DataType.FLOAT, null, null); 
    tipo = DataType.FLOAT;
:};
variable ::= IDENTIFIER:id COMMA variable 
{: 
    System.out.println("variable");
    simbolTable.add(""+id, tipo, null, null); 
:};